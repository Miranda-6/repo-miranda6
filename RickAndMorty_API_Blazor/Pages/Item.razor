@page "/character"
@using RickAndMortyApi.Dtos
@inject HttpClient httpClient

<h1 class="text-center fs-1 fw-bolder">Character List</h1>

<!-- Contenedor de tarjetas -->
<div class="row row-cols-1 row-cols-md-4 g-4">
    @if (characters != null && characters.Count > 0)
    {
        @foreach (CharacterDto character in characters)
        {
            <div class="col">
                <div class="card h-100">
                    <img src="@character.image" class="card-img-top" alt="@character.name">
                    <div class="card-body">
                        <h5 class="card-title text-center">
                            <a href="/character/@character.id" target="_blank">@character.name</a>
                        </h5>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <p>Cargando personajes...</p>
    }
</div>

<!-- Paginación -->
<div class="mt-3">
    <button class="btn btn-primary me-2" @onclick="PreviousPage" disabled="@(currentPage == 1)">Anterior</button>
    <button class="btn btn-primary" @onclick="NextPage">Siguiente</button>
</div>

@code {
    public List<CharacterDto> characters = new List<CharacterDto>();
    private int currentPage = 1; // Página actual

    protected override async Task OnInitializedAsync()
    {
        await LoadCharacters();
    }

    // Método para cargar personajes de la página actual
    private async Task LoadCharacters()
    {
        try 
        {
            var response = await httpClient.GetFromJsonAsync<ApiResponse<CharacterDto>>($"character?page={currentPage}");
            if (response != null && response.Results != null)
            {
                characters = response.Results; // Actualiza la lista de personajes
            }
        } 
        catch (Exception ex) 
        {
            Console.WriteLine($"Error al cargar los personajes: {ex.Message}");
        }
    }

    //Avanzar a la siguiente página
    private async Task NextPage()
    {
        currentPage++;
        await LoadCharacters();
    }

    //Retroceder a la página anterior
    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadCharacters();
        }
    }
}
